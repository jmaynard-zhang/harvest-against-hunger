# # -- Fixing `Pounds purchased` --
# # Remove unnecessary numbers by removing everything after the '=', '(', and
# # '$' signs (inclusive)
remove <- "\\(.*"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
# }
#
#
# # -- Merge lists --
# df <- rbindlist(list)
#
#
# # -- Fixing `Pounds purchased` --
# # Remove unnecessary numbers by removing everything after the '=', '(', and
# # '$' signs (inclusive)
remove <- "\\$.*"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
# }
#
#
# # -- Merge lists --
# df <- rbindlist(list)
#
#
# # -- Fixing `Pounds purchased` --
# # Remove unnecessary numbers by removing everything after the '=', '(', and
# # '$' signs (inclusive)
remove <- "\\(.*"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
# Remove unnecessary numbers by removing everything after the '=', '(', and
# '$' signs (inclusive).
#
# df = dataframe
# col = column
strip_unnecessary <- function(df) {
# remove <- "\\(.*|=.*|\\$.*| +$"
#
# df <- df %>%
#   mutate(pounds_purchased=gsub(pattern=remove,
#                                  replacement = "",
#                                  df$pounds_purchased))
remove <- "\\(.*|=.*|\\$.*| +$"
return <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
return(return)
}
strip_unnecessary(list[[5]])
list[[5]]
strip_unnecessary(list[[20]])
list[[20]]
list[[3]]
list[[4]]
list[[6]]
strip_unnecessary(list[[6]])
list[[7]]
strip_unnecessary(list[[7]])
list[[8]]
list[[9]]
list[[10]]
list[[11]]
list[[12]]
list[[13]]
list[[14]]
list[[15]]
list[[16]]
list[[17]]
list[[18]]
list[[19]]
list[[30]]
# Replaces characters between numbers with a single '+'.
#
# df = dataframe
non_num_to_plus <- function(df) {
# Replace non-numbers with spaces
remove <- "[^0-9.-]"
df <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = " ",
df$pounds_purchased))
# Trim whitespace
df <- df %>%
mutate(pounds_purchased=str_trim(str_squish(df$pounds_purchased)))
# Replace spaces with `+`
df <- df %>%
mutate(pounds_purchased=gsub(pattern=" ",
replacement="+",
df$pounds_purchased))
return(df)
}
# Returns a dataframe, where the pounds purchased column is prepared to be
# evaluable in excel (for fixing pounds purchased). COLUMN MUST BE NAMED
# `pounds_purchased`.
#
# df = dataframe
fix_lbs_purchased <- function(df) {
df <- strip_unnecessary(df)
df <- non_num_to_plus(df)
return(df)
}
df <- rbindlist(list)
list
fix_lbs_purchased(list[[10]])
df <- read_csv("Data/dataframe.csv")
View(df)
# Returns a dataframe with a single column of unique, alphabetically-sorted
# farm names from given dataframe (for fixing farm names). COLUMN NAME MUST BE
# `farm_name`.
get_unq_farms <- function(df) {
df <- df %>%
select(farm_name) %>%
unique() %>%
arrange(farm_name)
return(df)
}
get_unq_farms(df)
View(df)
df <- read_csv("Data/dataframe.csv")
sep_coords(df)
# Returns a dataframe with coordinates from given dataframe separated into `lon`
# and `lat` columns. COLUMN NAME MUST BE `coordinates`.
#
# df = dataframe
sep_coords <- function(df) {
df <- df %>%
mutate(lat = as.numeric(gsub("^(.*?),.*", "\\1", coordinates)),
lon = as.numeric(sub("^.*?,", "", coordinates)))
return(df)
}
sep_coords(df)
View(df)
shiny::runApp()
# Returns a dataframe, replacing the order date column with order month data.
get_order_month <- function(df) {
df <- df %>%
mutate(order_month=lubridate::floor_date(Order.Date, "month"))
return(df)
}
# Returns a dataframe, replacing the order date column with order month data.
# COLUMN NAME MUST BE `order_date`.
#
# df = dataframe
get_order_month <- function(df) {
df <- df %>%
mutate(order_month=lubridate::floor_date(order_date, "month"))
return(df)
}
get_order_month(df)
get_order_month(list[[1]])
test <- get_order_month(list[[5]])
View(test)
runApp()
runApp()
# Credits
credits <- HTML('<footer>
Visualizations designed and built by Maynard Maynard-Zhang.
</footer>')
runApp()
correct_farms <- read.csv("./Data/Original Data/correct_farm_names.csv")
# Join main df with fixed farm names
df <- df %>%
left_join(correct_farms)
# Remove the old farm names column
df <- df %>%
select(-Farm.Name)
# Rename fixed farm names column to "Farm.Name"
df <- df %>%
rename(Farm.Name="Correct.Farm.Name")
# -- Load packages --
load_pckg()
correct_farms <- read.csv("./Data/Original Data/correct_farm_names.csv")
# Join main df with fixed farm names
df <- df %>%
left_join(correct_farms)
# Remove the old farm names column
df <- df %>%
select(-Farm.Name)
# Rename fixed farm names column to "Farm.Name"
df <- df %>%
rename(Farm.Name="Correct.Farm.Name")
# # -- Fix misspelled farm names --
# farms <- df %>%
#   select(Farm.Name) %>%
#   unique() %>%
#   arrange(Farm.Name)
#
# write.csv(farms,
#           "Data/Original Data/misspelled_farm_names.csv",
#           row.names=F)
#
correct_farms <- read.csv("./Data/Original Data/correct_farm_names.csv")
# Join main df with fixed farm names
df <- df %>%
left_join(correct_farms)
# # -- Fix misspelled farm names --
# farms <- df %>%
#   select(Farm.Name) %>%
#   unique() %>%
#   arrange(Farm.Name)
#
# write.csv(farms,
#           "Data/Original Data/misspelled_farm_names.csv",
#           row.names=F)
#
correct_farms <- read.csv("./Data/Original Data/correct_farm_names.csv")
# Join main df with fixed farm names
df <- df %>%
left_join(correct_farms)
View(df)
# Remove the old farm names column
df <- df %>%
select(-farm_name)
# Rename fixed farm names column to "Farm.Name"
df <- df %>%
rename(farm_name="correct_farm_name")
# # -- Fix misspelled farm names --
# farms <- df %>%
#   select(Farm.Name) %>%
#   unique() %>%
#   arrange(Farm.Name)
#
# write.csv(farms,
#           "Data/Original Data/misspelled_farm_names.csv",
#           row.names=F)
#
correct_farms <- read.csv("./Data/Original Data/correct_farm_names.csv")
# Join main df with fixed farm names
df <- df %>%
left_join(correct_farms)
# Rename fixed farm names column to "Farm.Name"
df <- df %>%
rename(farm_name="correct_farm_names")
# -- DF to csv --
write.csv(df, "./Data/dataframe.csv", row.names = F)
df <- read_csv("Data/dataframe.csv")
source("C:/Users/starr/Google Drive/Career Projects/Projects/Harvest Against Hunger Summer '21/harvest-against-hunger/Data/Data Compilation.R")
shiny::runApp()
# old_coords <- read.csv("./Data/Original Data/correct_coords.csv")
#
# old_coords <- correct_farms %>%
#   full_join(old_coords)
#
# write.csv(old_coords,
#           "./Data/Original Data/old_coords.csv",
#           row.names = F)
#
# # Load new farm coord data
farm_coords <- read.csv("./Data/Original Data/correct_coords.csv")
df <- df %>%
select(-coordinates)
View(df)
df <- df %>%
left_join(farm_coords)
# old_coords <- read.csv("./Data/Original Data/correct_coords.csv")
#
# old_coords <- correct_farms %>%
#   full_join(old_coords)
#
# write.csv(old_coords,
#           "./Data/Original Data/old_coords.csv",
#           row.names = F)
#
# # Load new farm coord data
farm_coords <- read.csv("./Data/Original Data/correct_coords.csv")
df <- df %>%
left_join(farm_coords)
# -- Load data --
# KCFS 2019
X19_list <- list()
X19_programs <- excel_sheets(path="./Data/Original Data/KCFS 2019.xlsx")
sheets <- 3:length(X19_programs)
for (i in sheets) {
temp <- read_excel("./Data/Original Data/KCFS 2019.xlsx",
skip = 2,
sheet = X19_programs[i])
X19_list[[i - 2]] <- temp
}
# KCFS 2020
X20_list <- list()
X20_programs <- excel_sheets(path="./Data/Original Data/KCFS 2020.xlsx")
sheets <- 2:length(X20_programs)
for (i in sheets) {
temp <- read_excel("./Data/Original Data/KCFS 2020.xlsx",
skip = 3,
sheet = X20_programs[i])
X20_list[[i - 1]] <- temp
}
# CARES
cares.list <- list()
cares_programs <- excel_sheets(path="./Data/Original Data/CARES.xlsx")
sheets <- 2:length(cares_programs)
for (i in sheets) {
temp <- read_excel("./Data/Original Data/CARES.xlsx",
skip = 1,
sheet = cares_programs[i])
cares.list[[i - 1]] <- temp
}
# -- Select & Filter --
# Append lists
X19_list <- X19_list %>%
lapply(rename, `Order Date` = `Contract Date`)
x <- c()
for (i in 1:length(X19_list)) {
temp_cols <- colnames(X19_list[[i]])
temp_df <- X19_list[[i]]
if ("Contract Amount" %in% temp_cols) {
X19_list[[i]] <- temp_df %>%
rename(`Order Amount ($)` = `Contract Amount`)
} else if ("\r\nContract Amount" %in% temp_cols) {
X19_list[[i]] <- temp_df %>%
rename(`Order Amount ($)` = `\r\nContract Amount`)
} else {
x <- append(x, i)
}
}
list <- append(X19_list, X20_list)
list <- append(list, cares.list)
## Select relevant columns
list <- list %>%
lapply(select, `Farm Name`,
`Order Date`,
`Pounds purchased`,
`Order Amount ($)`
)
## Filter out "Totals"
list <- list %>%
lapply(subset, `Farm Name` != "Totals")
# -- Small Fixes --
## Filter out empty dfs
list <- list[lapply(list, nrow) > 0]
for (i in 1:length(list)) {
curr = list[[i]]
## Order Date to consistent date format
if (typeof(curr$`Order Date`) == "character") {
list[[i]]$`Order Date` = as.Date(
as.numeric(curr$`Order Date`), origin = "1899-12-30")
} else {
list[[i]]$`Order Date` = as.Date(curr$`Order Date`)
}
}
# -- Merge lists --
df <- rbindlist(list)
View(df)
# -- Fixing `Pounds purchased` --
# Remove unnecessary numbers by removing everything after the '=', '(', and
# '$' signs (inclusive)
remove <- "\\(.*|=.*|\\$.*| +$"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
# Replace non-numbers with spaces
remove2 <- "[^0-9.-]"
df_fix_lbs <- df_fix_lbs %>%
mutate(`Pounds purchased`=gsub(pattern=remove2,
replacement = " ",
df_fix_lbs$`Pounds purchased`))
# Trim whitespace
df_fix_lbs <- df_fix_lbs %>%
mutate(`Pounds purchased`=str_trim(str_squish(df_fix_lbs$`Pounds purchased`)))
# Replace spaces with `+`
df_fix_lbs <- df_fix_lbs %>%
mutate(`Pounds purchased`=gsub(pattern=" ",
replacement="+",
df_fix_lbs$`Pounds purchased`))
# Add numbers together in excel!!!
write.csv(df_fix_lbs, "./Data/fix_pounds_purchased.csv", row.names = F)
# -- Fixing `Pounds purchased` --
# Remove unnecessary numbers by removing everything after the '=', '(', and
# '$' signs (inclusive)
remove <- "\\(.*|=.*|\\$.*| +$"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
# -- Fix column names --
df <- df %>%
rename(farm_name=`Farm Name`,
order_date=`Order Date`,
pounds_purchased=`Pounds purchased`,
order_amount=`Order Amount ($)`)
# -- Fixing `Pounds purchased` --
# Remove unnecessary numbers by removing everything after the '=', '(', and
# '$' signs (inclusive)
remove <- "\\(.*|=.*|\\$.*| +$"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
# Replace non-numbers with spaces
remove2 <- "[^0-9.-]"
df_fix_lbs <- df_fix_lbs %>%
mutate(`Pounds purchased`=gsub(pattern=remove2,
replacement = " ",
df_fix_lbs$`Pounds purchased`))
df_fix_lbs <- df_fix_lbs %>%
mutate(pounds_purchased=gsub(pattern=remove2,
replacement = " ",
df_fix_lbs$pounds_purchased))
# Trim whitespace
df_fix_lbs <- df_fix_lbs %>%
mutate(pounds_purchased=str_trim(str_squish(df_fix_lbs$pounds_purchased)))
# Replace spaces with `+`
df_fix_lbs <- df_fix_lbs %>%
mutate(pounds_purchased=gsub(pattern=" ",
replacement="+",
df_fix_lbs$pounds_purchased))
# Add numbers together in excel!!!
write.csv(df_fix_lbs, "./Data/fix_pounds_purchased.csv", row.names = F)
# -- Compiled 2019-2020 KCFS + CARES data, with pounds purchased fixed --
df <- read.csv("./Data/correct_pounds_purchased.csv") %>%
# Char to num type
mutate(Pounds.Purchased=as.numeric(Pounds.purchased)) %>%
# Char to date type
mutate(Order.Date=anydate(Order.Date)) %>%
# Rename Order.Date
rename(Order.Amount=Order.Amount....)
read.csv("./Data/correct_pounds_purchased.csv") %>%
# Char to num type
mutate(pounds_purchased=as.numeric(pounds_purchased))
# -- Compiled 2019-2020 KCFS + CARES data, with pounds purchased fixed --
df_temp <- read.csv("./Data/correct_pounds_purchased.csv") %>%
# Char to num type
mutate(pounds_purchased=as.numeric(pounds_purchased)) %>%
# Char to date type
mutate(order_date=anydate(order_date)) %>%
# Rename Order.Date
rename(Order.Amount=Order.Amount....)
df_temp <- read.csv("./Data/correct_pounds_purchased.csv") %>%
# Char to num type
mutate(pounds_purchased=as.numeric(pounds_purchased))
View(df_temp)
df_temp <- read.csv("./Data/correct_pounds_purchased.csv") %>%
# Char to num type
mutate(pounds_purchased=as.numeric(pounds_purchased)) %>%
# Char to date type
mutate(order_date=anydate(order_date)
df_temp <- read.csv("./Data/correct_pounds_purchased.csv") %>%
# Char to num type
mutate(pounds_purchased=as.numeric(pounds_purchased)) %>%
# Char to date type
mutate(order_date=anydate(order_date))
?anydate
View(df_temp)
# -- Compiled 2019-2020 KCFS + CARES data, with pounds purchased fixed --
df <- read.csv("./Data/correct_pounds_purchased.csv") %>%
# Char to num type
mutate(pounds_purchased=as.numeric(pounds_purchased))
correct_farms <- read.csv("./Data/Original Data/correct_farm_names.csv")
# Join main df with fixed farm names
df <- df %>%
left_join(correct_farms)
# Remove the old farm names column
df <- df %>%
select(-farm_name)
# Rename fixed farm names column to "Farm.Name"
df <- df %>%
rename(farm_name="correct_farm_name")
# Load new farm coord data
farm_coords <- read.csv("./Data/Original Data/correct_coords.csv")
df <- df %>%
left_join(farm_coords)
# Separate coords into lat & long
df <- df %>%
mutate(lat = as.numeric(gsub("^(.*?),.*", "\\1", Coordinates)),
lon = as.numeric(sub("^.*?,", "", Coordinates)))
# Separate coords into lat & long
df <- df %>%
mutate(lat = as.numeric(gsub("^(.*?),.*", "\\1", coordinates)),
lon = as.numeric(sub("^.*?,", "", coordinates)))
anydate("6/13/2019")
# -- Add Order Month column --
df <- df %>%
mutate(order_date=anydate(order_date))
# -- Add Order Month column --
df <- df %>%
mutate(order_date=anydate(order_date)) %>%
mutate(order_month=lubridate::floor_date(Order.Date, "month"))
# -- Add Order Month column --
df <- df %>%
mutate(order_date=anydate(order_date)) %>%
mutate(order_month=floor_date(order_date, "month"))
# -- Add Order Month column --
df <- df %>%
mutate(order_date=anydate(order_date)) %>%
mutate(order_month=lubridate::floor_date(order_date, "month"))
# Rename columns
df <- df %>%
rename(order_date=order_month)
# -- Add Order Month column --
df <- df %>%
mutate(order_date=anydate(order_date)) %>%
mutate(order_month=lubridate::floor_date(order_date, "month")) %>%
select(-order_date)
# Rename columns
df <- df %>%
rename(order_date=order_month)
View(df)
# -- DF to csv --
write.csv(df, "./Data/dataframe.csv", row.names = F)
shiny::runApp()
runApp()
