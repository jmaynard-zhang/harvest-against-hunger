rangeslider = list(type = "date")),
yaxis = list(title = "Price"))
fig <- plot_ly(orders_monthly, x = ~Date)
fig <- fig %>% add_lines(y = num_orders_cum, name = "Orders Monthly")
fig <- fig %>% add_lines(y = orders_monthly$num_orders_cum, name = "Orders Monthly")
fig <- fig %>% layout(
title = "Stock Prices",
xaxis = list(
rangeselector = list(
buttons = list(
list(
count = 3,
label = "3 mo",
step = "month",
stepmode = "backward"),
list(
count = 6,
label = "6 mo",
step = "month",
stepmode = "backward"),
list(
count = 1,
label = "1 yr",
step = "year",
stepmode = "backward"),
list(
count = 1,
label = "YTD",
step = "year",
stepmode = "todate"),
list(step = "all"))),
rangeslider = list(type = "date")),
yaxis = list(title = "Price"))
fig
source("~/.active-rstudio-document")
fig
source("~/.active-rstudio-document")
fig
runApp()
runApp()
runApp()
runApp()
fig
fig <- plot_ly(orders_monthly, x = ~order_month) %>%
add_lines(y = orders_monthly$num_orders_cum, name = "Orders Monthly") %>%
layout(
title = "Stock Prices",
xaxis = list(
rangeslider = list(type = "date")),
yaxis = list(title = "Price"))
fig
fig <- plot_ly(orders_monthly, x = ~order_month) %>%
add_lines(y = orders_monthly$num_orders_cum, name = "Orders Monthly") %>%
layout(
title = "Orders Monthly",
xaxis = list(
rangeslider = list(type = "date")),
yaxis = list(title = "Orders"))
fig
fig <- plot_ly(orders_monthly, x = ~order_month) %>%
add_lines(y = orders_monthly$num_orders_cum, name = "Orders Monthly") %>%
layout(
title = "Orders Monthly",
xaxis = list(
rangeslider = list(type = "date"),
title = "Month"),
yaxis = list(title = "Orders"))
fig
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deparse(substitute(orders_monthly))
order_monthly = order_monthly
order_monthly == order_monthly
temp == temp
1 == 1
df == df
runApp()
runApp()
runApp()
runApp()
runApp()
get_title("farms_monthly")
typeof(get_title("farms_monthly"))
typeof("test")
runApp()
runApp()
?c
runApp()
?for
get_titles <- function(df_names) {
titles = vector()
# Go through every given dataframe name.
for (i in length(df_names)) {
df_name = df_names[i]
title = get_title(df_name)
titles.append(title = df_name)
}
}
return(titles)
get_titles <- function(df_names) {
titles = vector()
# Go through every given dataframe name.
for (i in length(df_names)) {
df_name = df_names[i]
title = get_title(df_name)
titles.append(title = df_name)
}
return(titles)
}
test = list("test", "test2", "test3")
test <-  list("test", "test2", "test3")
test <- list("test", "test2", "test3")
test <- list("test", "test2", "test4")
test <- list("test", "test2", "test4", "")
test <- list("test", "test2", "test3")
get_titles(test)
append(titles, title = df_name)
get_titles <- function(df_names) {
titles = vector()
# Go through every given dataframe name.
for (i in length(df_names)) {
df_name = df_names[i]
title = get_title(df_name)
append(titles, title = df_name)
}
return(titles)
}
get_titles(test)
get_titles <- function(df_names) {
titles = vector()
# Go through every given dataframe name.
for (i in length(df_names)) {
df_name = df_names[i]
title = get_title(df_name)
obj = (title = df_name)
append(titles, obj)
}
return(titles)
}
get_titles(test)
runApp()
runApp()
runApp()
runApp()
git add .
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# -- Total Order Amount ($) --
`Total Order Amount ($)` <- df %>%
select(`Farm Name`, `Order Amount ($)`, lat, lon) %>%
group_by(`Farm Name`, lat, lon) %>%
summarize(total_order_amt=sum(`Order Amount ($)`)) %>%
na.omit()
# -- Amount purchased (lb) --
`Pounds Purchased Monthly` <- df %>%
select(order_month, `Pounds purchased`) %>%
group_by(order_month) %>%
summarize(`Total Pounds Purchased`=sum(`Pounds purchased`, na.rm=T)) %>%
mutate(cumulative=cumsum(`Total Pounds Purchased`)) %>%
na.omit()
# -- Load data --
source("./Data/Data Compilation.R")
# ~~ LINE DATA ~~
# -- Num farms served --
`Farms Served Monthly` <- df %>%
select(`Farm Name`, `Order Date`) %>%
mutate(order_month=lubridate::floor_date(`Order Date`, "month")) %>%
unique() %>%
group_by(order_month) %>%
summarize(num_farms=n()) %>%
mutate(num_farms_cum=cumsum(num_farms)) %>%
na.omit()
# -- Num orders --
`Number of Orders Monthly` <- df %>%
select(`Farm Name`, `Order Date`) %>%
mutate(order_month=lubridate::floor_date(`Order Date`, "month")) %>%
group_by(order_month) %>%
summarize(num_orders=n()) %>%
mutate(num_orders_cum=cumsum(num_orders)) %>%
na.omit()
# -- Order amount ($) --
`Order Amount ($) Monthly` <- df %>%
select(`Order Date`, `Order Amount ($)`) %>%
mutate(order_month=lubridate::floor_date(`Order Date`, "month")) %>%
group_by(order_month) %>%
summarize(`Total Order Amount ($)`=sum(`Order Amount ($)`, na.rm=T)) %>%
mutate(cumulative=cumsum(`Total Order Amount ($)`)) %>%
na.omit()
# -- Amount purchased (lb) --
`Pounds Purchased Monthly` <- df %>%
select(order_month, `Pounds purchased`) %>%
group_by(order_month) %>%
summarize(`Total Pounds Purchased`=sum(`Pounds purchased`, na.rm=T)) %>%
mutate(cumulative=cumsum(`Total Pounds Purchased`)) %>%
na.omit()
# -- Funds disbursed ($) --
`Funds Disbursed ($) Yearly` <- funds %>%
group_by(year) %>%
summarize(total_funds=sum(funds_dispersed, na.rm = T)) %>%
mutate(total_funds_cum=cumsum(total_funds)) %>%
na.omit()
# ~~ MAP DATA ~~
# -- Set up map --
wa <- map_data("county", "washington")
# -- Total Orders --
`Total Orders` <- df %>%
select(`Farm Name`, `Order Date`, lat, lon) %>%
group_by(`Farm Name`, lat, lon) %>%
summarize(`Total Orders`=n()) %>%
na.omit()
# -- Total Order Amount ($) --
`Total Order Amount ($)` <- df %>%
select(`Farm Name`, `Order Amount ($)`, lat, lon) %>%
group_by(`Farm Name`, lat, lon) %>%
summarize(total_order_amt=sum(`Order Amount ($)`)) %>%
na.omit()
# -- Total Pounds Purchased --
`Total Pounds Purchased` <- df %>%
select(`Farm Name`, `Pounds purchased`, lat, lon) %>%
group_by(`Farm Name`, lat, lon) %>%
summarize(`Total Pounds Purchased`=sum(`Pounds purchased`)) %>%
na.omit()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df)
View(`Funds Disbursed ($) Yearly`)
# KCFS Funds
funds <- read_excel("./Data/KCFS $.xlsx") %>%
pivot_longer(!Organization,
names_to="year",
values_to="funds_dispersed") %>%
mutate(year=as.Date(year))
# KCFS Funds
funds <- read_excel("./Data/KCFS $.xlsx") %>%
pivot_longer(!Organization,
names_to="year",
values_to="funds_dispersed") %>%
mutate(year=as.Date(as.numeric(year)))
View(funds)
# KCFS Funds
funds <- read_excel("./Data/KCFS $.xlsx") %>%
pivot_longer(!Organization,
names_to="year",
values_to="funds_dispersed") %>%
mutate(year=as.Date(ISOdate(year, 1, 1)))
View(funds)
runApp()
runApp()
View(`Total Orders`)
runApp()
runApp()
runApp()
# test
map.plot <- ggplot() +
geom_polygon(data=wa,
aes(x=long, y=lat, group=group),
alpha=0.3) +
geom_point(data=`Total Orders`,
aes(x=lon,
y=lat,
alpha=total,
text=paste("farm:", `Farm Name`)),
color="dark green") +
theme_void() +
coord_map()
# test
map.plot <- ggplot() +
geom_polygon(data=wa,
aes(x=long, y=lat, group=group),
alpha=0.3) +
geom_point(data=`Total Orders`,
aes(x=lon,
y=lat,
alpha=total,
text=paste("farm:", `Farm Name`)),
color="dark green") +
theme_void() +
coord_map()
})
map.plot <- ggplot() +
geom_polygon(data=wa,
aes(x=long, y=lat, group=group),
alpha=0.3) +
geom_point(data=`Total Orders`,
aes(x=lon,
y=lat,
alpha=total,
text=paste("farm:", `Farm Name`)),
color="dark green") +
theme_void() +
coord_map()
})
# test
map.plot <- ggplot() +
geom_polygon(data=wa,
aes(x=long, y=lat, group=group),
alpha=0.3) +
geom_point(data=`Total Orders`,
aes(x=lon,
y=lat,
alpha=total,
text=paste("farm:", `Farm Name`)),
color="dark green") +
theme_void() +
coord_map()
map.plot
?map_data
?readOGR
install.packages(rgdal)
library(ggplot2)
install.packages("rgdal")
# Data filtering
library(rgdal)
?readOGR
kingco <- readOGR(dsn=file.path("Data/kingco_shapefile/",
"Data/wa_shapefile/tl_2016_53_cousub.shp"))
kingco <- readOGR(dsn="Data/wa_shapefile/tl_2016_53_cousub.shp")
# test
map.plot <- ggplot() +
geom_polygon(data=kingco,
aes(x=long, y=lat, group=group),
alpha=0.3) +
geom_point(data=`Total Orders`,
aes(x=lon,
y=lat,
alpha=total,
text=paste("farm:", `Farm Name`)),
color="dark green") +
theme_void() +
coord_map()
map.plot
View(kingco)
kingco
View(kingco)
View(wa)
wa
map.plot <- ggplot() +
geom_polygon(data=kingco,
aes(x=long, y=lat, group=group),
alpha=0.3)
map.plot
ggplot() +
geom_polygon(data=wa,
aes(x=long, y=lat, group=group),
alpha=0.3)
kingco <- readOGR(dsn="Data/wa_shapefile")
kingco
# test
map.plot <- ggplot() +
geom_polygon(data=kingco,
aes(x=long, y=lat, group=group),
alpha=0.3) +
geom_point(data=`Total Orders`,
aes(x=lon,
y=lat,
alpha=total,
text=paste("farm:", `Farm Name`)),
color="dark green") +
theme_void() +
coord_map()
ggplot() +
geom_polygon(data=kingco,
aes(x=long, y=lat, group=group),
alpha=0.3)
kingco <- readOGR(dsn="Data/kingco_shapefile/")
kingco <- readOGR(dsn="Data/kingco_shapefile/King_County_Political_Boundary_(no_waterbodies)___kingco_area.shp")
ggplot() +
geom_polygon(data=kingco,
aes(x=long, y=lat, group=group),
alpha=0.3)
ggplot() +
geom_polygon(data=kingco,
aes(x=long, y=lat, group=group),
alpha=0.3) +
geom_point(data=`Total Orders`,
aes(x=lon,
y=lat,
alpha=total,
text=paste("farm:", `Farm Name`)),
color="dark green") +
theme_void() +
coord_map()
# test
map.plot <- ggplot() +
geom_polygon(data=kingco,
aes(x=long, y=lat, group=group),
alpha=0.3,
col="red") +
geom_point(data=`Total Orders`,
aes(x=lon,
y=lat,
alpha=total,
text=paste("farm:", `Farm Name`)),
color="dark green") +
theme_void() +
coord_map()
map.plot
# test
map.plot <- ggplot() +
geom_polygon(data=kingco,
aes(x=long, y=lat, group=group),
alpha=0.3,
border="red") +
geom_point(data=`Total Orders`,
aes(x=lon,
y=lat,
alpha=total,
text=paste("farm:", `Farm Name`)),
color="dark green") +
theme_void() +
coord_map()
# test
map.plot <- ggplot() +
geom_polygon(data=kingco,
aes(x=long, y=lat, group=group),
alpha=0.3,
fill="red") +
geom_point(data=`Total Orders`,
aes(x=lon,
y=lat,
alpha=total,
text=paste("farm:", `Farm Name`)),
color="dark green") +
theme_void() +
coord_map()
map.plot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# -- Remove farms with no locations --
df_map <- df %>%
filter(!(`Farm Name` == "Lily Fields"))
View(df_map)
runApp()
View(`Total Orders`)
runApp()
View(df)
View(df_map)
runApp()
runApp()
