temp <- read_excel("./Data/Original Data/KCFS 2020.xlsx",
skip = 3,
sheet = X20_programs[i])
X20_list[[i - 1]] <- temp
}
# CARES
cares.list <- list()
cares_programs <- excel_sheets(path="./Data/Original Data/CARES.xlsx")
sheets <- 2:length(cares_programs)
for (i in sheets) {
temp <- read_excel("./Data/Original Data/CARES.xlsx",
skip = 1,
sheet = cares_programs[i])
cares.list[[i - 1]] <- temp
}
# Append lists
X19_list <- X19_list %>%
lapply(rename, `Order Date` = `Contract Date`)
x <- c()
for (i in 1:length(X19_list)) {
temp_cols <- colnames(X19_list[[i]])
temp_df <- X19_list[[i]]
if ("Contract Amount" %in% temp_cols) {
X19_list[[i]] <- temp_df %>%
rename(`Order Amount ($)` = `Contract Amount`)
} else if ("\r\nContract Amount" %in% temp_cols) {
X19_list[[i]] <- temp_df %>%
rename(`Order Amount ($)` = `\r\nContract Amount`)
} else {
x <- append(x, i)
}
}
list <- append(X19_list, X20_list)
list <- append(list, cares.list)
## Select relevant columns
list <- list %>%
lapply(select, `Farm Name`,
`Order Date`,
`Pounds purchased`,
`Order Amount ($)`
)
## Filter out "Totals"
list <- list %>%
lapply(subset, `Farm Name` != "Totals")
# -- Small Fixes --
## Filter out empty dfs
list <- list[lapply(list, nrow) > 0]
consistent_date(list, `Order date`)
# Returns a list of dataframes with date columns in consistent format.
#
# df_list = list of dataframes (ex: list)
# order_date = name of
consistent_date <- function(df_list, order_date) {
# Get number of dataframes in df list
num_dfs <- length(df_list)
# Fix dates in each df
for (df in 1:num_dfs) {
# Get current df
curr = df_list[[df]]
## Order Date to consistent date format
if (typeof(curr$`Order Date`) == "character") {
df_list[[df]]$`Order Date` = as.Date(
as.numeric(curr$`Order Date`), origin = "1899-12-30")
} else {
df_list[[df]]$`Order Date` = as.Date(curr$`Order Date`)
}
}
return(df_list)
}
consistent_date(list, `Order date`)
# Returns a list of dataframes with date columns in consistent format.
#
# df_list = list of dataframes (ex: list)
# order_date = name of
consistent_date <- function(df_list, order_date) {
# Get number of dataframes in df list
num_dfs <- length(df_list)
# Fix dates in each df
for (df in 1:num_dfs) {
# Get current df
curr = df_list[[df]]
## Order Date to consistent date format
if (typeof(curr$order_date) == "character") {
df_list[[df]]$order_date = as.Date(
as.numeric(curr$order_date), origin = "1899-12-30")
} else {
df_list[[df]]$order_date = as.Date(curr$order_date)
}
}
return(df_list)
}
consistent_date(list, `Order date`)
list <- list %>%
lapply(rename, order_date = `Order Date`)
list[[1]]
consistent_date(list)
runApp()
source("Functions.R")
runApp()
source("Functions.R")
source("Data/Data Compilation.R")
shiny::runApp()
df$order_date = as.Date(
as.numeric(curr$order_date), origin = "1899-12-30")
df$order_date = as.Date(
as.numeric(df$order_date), origin = "1899-12-30")
View(df)
df <- read_csv("Data/dataframe.csv")
shiny::runApp()
# Remove unnecessary numbers by removing everything after the '=', '(', and
# '$' signs (inclusive).
#
# df = dataframe
# col = column
strip_unnecessary <- function(df) {
remove <- "\\(.*|=.*|\\$.*| +$"
df <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
return(df)
}
strip_unnecessary("10 $10")
strip_unnecessary(list[[1]])
list <- list %>%
lapply(rename, pounds_purchased = `Pounds Purchasdd`)
list <- list %>%
lapply(rename, pounds_purchased = `Pounds Purchased`)
list <- list %>%
lapply(rename, pounds_purchased = `Pounds purchased`)
strip_unnecessary(list[[1]])
strip_unnecessary(list[[2]])
# Remove unnecessary numbers by removing everything after the '=', '(', and
# '$' signs (inclusive).
#
# df = dataframe
# col = column
strip_unnecessary <- function(df) {
remove <- "\\(.*|=.*|\\$.*| +$"
df <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
return(df)
}
strip_unnecessary(list[[2]])
remove <- "\\(.*|=.*|\\$.*| +$"
list[[1]] %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
list[[1]]$pounds_purchased))
list[[1]] %>%
mutate(pounds_purchased=gsub(pattern="60",
replacement = "",
list[[1]]$pounds_purchased))
remove <- "\\(.*|=.*|\\$.*| +$"
list[[1]] %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
list[[1]]$pounds_purchased))
list[[1]] %>%
mutate(pounds_purchased=gsub(pattern="\\(.*|=.*|\\$.*| +$",
replacement = "",
list[[1]]$pounds_purchased))
remove <- "\\(.*|=.*|\\$.*| +$"
df_fix_lbs <- df %>%
mutate(`Pounds purchased`=gsub(pattern=remove,
replacement = "",
df$`Pounds purchased`))
remove <- "\\(.*|=.*|\\$.*| +$"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
View(df_fix_lbs)
test <- list[[1]] %>%
mutate(pounds_purchased=gsub(pattern="\\(.*|=.*|\\$.*| +$",
replacement = "",
list[[1]]$pounds_purchased))
test
# Remove unnecessary numbers by removing everything after the '=', '(', and
# '$' signs (inclusive).
#
# df = dataframe
# col = column
strip_unnecessary <- function(df) {
# remove <- "\\(.*|=.*|\\$.*| +$"
#
# df <- df %>%
#   mutate(pounds_purchased=gsub(pattern=remove,
#                                  replacement = "",
#                                  df$pounds_purchased))
remove <- "\\(.*|=.*|\\$.*| +$"
return <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
return(return)
}
strip_unnecessary(list[[1]])
remove <- "\\(.*|=.*|\\$.*| +$"
return <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
return
# Returns a list of dataframes with date columns in consistent format. DATE
# COLUMN MUST BE NAMED `order_date`
#
# df_list = list of dataframes (ex: list)
consistent_date <- function(df_list) {
# Get number of dataframes in df list
num_dfs <- length(df_list)
# Fix dates in each df
for (df in 1:num_dfs) {
# Get current df
curr = df_list[[df]]
# Fix column differently based off of it's type
if (typeof(curr$order_date) == "character") {
df_list[[df]]$order_date = as.Date(
as.numeric(curr$order_date), origin = "1899-12-30")
} else {
df_list[[df]]$order_date = as.Date(curr$order_date)
}
}
return(df_list)
}
# Remove unnecessary numbers by removing everything after the '=', '(', and
# '$' signs (inclusive).
#
# df = dataframe
# col = column
strip_unnecessary <- function(df) {
# remove <- "\\(.*|=.*|\\$.*| +$"
#
# df <- df %>%
#   mutate(pounds_purchased=gsub(pattern=remove,
#                                  replacement = "",
#                                  df$pounds_purchased))
remove <- "\\(.*|=.*|\\$.*| +$"
return <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
return(return)
}
strip_unnecessary(list[[1]])
# Data compilation
library(tidyverse)
library(readxl)
library(dplyr)
library(zoo)
library(rlist)
library(data.table)
library(stringr)
library(stringi)
library(anytime)
# Data filtering
library(rgdal)
# Visualizations
library(ggplot2)
library(RColorBrewer)
library(writexl)
library(plotly)
library(sf)
library(ggrepel)
library(maps)
library(mapproj)
library(shinythemes)
# Coding cleanup (delete later)
library(styler)
library(lintr)
# Remove unnecessary numbers by removing everything after the '=', '(', and
# '$' signs (inclusive).
#
# df = dataframe
# col = column
strip_unnecessary <- function(df) {
# remove <- "\\(.*|=.*|\\$.*| +$"
#
# df <- df %>%
#   mutate(pounds_purchased=gsub(pattern=remove,
#                                  replacement = "",
#                                  df$pounds_purchased))
remove <- "\\(.*|=.*|\\$.*| +$"
return <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
return(return)
}
strip_unnecessary(list[[1]])
remove <- "\\(.*|=.*|\\$.*| +$"
return <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
return
df <- list[[1]]
remove <- "\\(.*|=.*|\\$.*| +$"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
View(df_fix_lbs)
# }
#
#
# # -- Merge lists --
# df <- rbindlist(list)
#
#
# # -- Fixing `Pounds purchased` --
# # Remove unnecessary numbers by removing everything after the '=', '(', and
# # '$' signs (inclusive)
remove <- "(.*|=.*|\\$.*| +$"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
\\
# }
#
#
# # -- Merge lists --
# df <- rbindlist(list)
#
#
# # -- Fixing `Pounds purchased` --
# # Remove unnecessary numbers by removing everything after the '=', '(', and
# # '$' signs (inclusive)
remove <- "\\(.*|=.*|\\$.*| +$"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
View(df_fix_lbs)
# }
#
#
# # -- Merge lists --
# df <- rbindlist(list)
#
#
# # -- Fixing `Pounds purchased` --
# # Remove unnecessary numbers by removing everything after the '=', '(', and
# # '$' signs (inclusive)
remove <- "\\(.*"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
# }
#
#
# # -- Merge lists --
# df <- rbindlist(list)
#
#
# # -- Fixing `Pounds purchased` --
# # Remove unnecessary numbers by removing everything after the '=', '(', and
# # '$' signs (inclusive)
remove <- "\\$.*"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
# }
#
#
# # -- Merge lists --
# df <- rbindlist(list)
#
#
# # -- Fixing `Pounds purchased` --
# # Remove unnecessary numbers by removing everything after the '=', '(', and
# # '$' signs (inclusive)
remove <- "\\(.*"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
# Remove unnecessary numbers by removing everything after the '=', '(', and
# '$' signs (inclusive).
#
# df = dataframe
# col = column
strip_unnecessary <- function(df) {
# remove <- "\\(.*|=.*|\\$.*| +$"
#
# df <- df %>%
#   mutate(pounds_purchased=gsub(pattern=remove,
#                                  replacement = "",
#                                  df$pounds_purchased))
remove <- "\\(.*|=.*|\\$.*| +$"
return <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
return(return)
}
strip_unnecessary(list[[5]])
list[[5]]
strip_unnecessary(list[[20]])
list[[20]]
list[[3]]
list[[4]]
list[[6]]
strip_unnecessary(list[[6]])
list[[7]]
strip_unnecessary(list[[7]])
list[[8]]
list[[9]]
list[[10]]
list[[11]]
list[[12]]
list[[13]]
list[[14]]
list[[15]]
list[[16]]
list[[17]]
list[[18]]
list[[19]]
list[[30]]
# Replaces characters between numbers with a single '+'.
#
# df = dataframe
non_num_to_plus <- function(df) {
# Replace non-numbers with spaces
remove <- "[^0-9.-]"
df <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = " ",
df$pounds_purchased))
# Trim whitespace
df <- df %>%
mutate(pounds_purchased=str_trim(str_squish(df$pounds_purchased)))
# Replace spaces with `+`
df <- df %>%
mutate(pounds_purchased=gsub(pattern=" ",
replacement="+",
df$pounds_purchased))
return(df)
}
# Returns a dataframe, where the pounds purchased column is prepared to be
# evaluable in excel (for fixing pounds purchased). COLUMN MUST BE NAMED
# `pounds_purchased`.
#
# df = dataframe
fix_lbs_purchased <- function(df) {
df <- strip_unnecessary(df)
df <- non_num_to_plus(df)
return(df)
}
df <- rbindlist(list)
list
fix_lbs_purchased(list[[10]])
df <- read_csv("Data/dataframe.csv")
View(df)
# Returns a dataframe with a single column of unique, alphabetically-sorted
# farm names from given dataframe (for fixing farm names). COLUMN NAME MUST BE
# `farm_name`.
get_unq_farms <- function(df) {
df <- df %>%
select(farm_name) %>%
unique() %>%
arrange(farm_name)
return(df)
}
get_unq_farms(df)
View(df)
df <- read_csv("Data/dataframe.csv")
sep_coords(df)
# Returns a dataframe with coordinates from given dataframe separated into `lon`
# and `lat` columns. COLUMN NAME MUST BE `coordinates`.
#
# df = dataframe
sep_coords <- function(df) {
df <- df %>%
mutate(lat = as.numeric(gsub("^(.*?),.*", "\\1", coordinates)),
lon = as.numeric(sub("^.*?,", "", coordinates)))
return(df)
}
sep_coords(df)
View(df)
shiny::runApp()
# Returns a dataframe, replacing the order date column with order month data.
get_order_month <- function(df) {
df <- df %>%
mutate(order_month=lubridate::floor_date(Order.Date, "month"))
return(df)
}
# Returns a dataframe, replacing the order date column with order month data.
# COLUMN NAME MUST BE `order_date`.
#
# df = dataframe
get_order_month <- function(df) {
df <- df %>%
mutate(order_month=lubridate::floor_date(order_date, "month"))
return(df)
}
get_order_month(df)
get_order_month(list[[1]])
test <- get_order_month(list[[5]])
View(test)
runApp()
runApp()
# Credits
credits <- HTML('<footer>
Visualizations designed and built by Maynard Maynard-Zhang.
</footer>')
runApp()
