# Returns a list of dataframes from a given excel spreadsheet, where each
# dataframe is an excel sheet.
#
# xlsx = path to spreadsheet (ex: "./Data/Original Data/KCFS 2019.xlsx")
# start = starting sheet number (ex: 3)
# skip_row = number of top rows to ignore (ex: 2)
xlsx_to_list <- function(xlsx, start, skip_row) {
# Set up return list
list <- list()
# Get list of sheet names
sheet_names <- excel_sheets(path=xlsx)
# Get number of sheets
num_sheets <- length(sheet_names)
# Get range of relevant sheets
sheets <- start:num_sheets
# Add each sheet to the return list
for (sheet in sheets) {
# Temporarily store sheet
temp <- read_excel(xlsx,
skip = skip_row,
sheet = sheet_names[sheet])
# Offset this loop's index so that it matches the current index of the
# return list
offset_index <- sheet - start - 1
# Add sheet to proper index of return list
list[[offset_index]] <- temp
# Get the program name based off of the current sheet name
program_name <- sheet_names[[sheet]]
# Add program name to a new program name column in the return list
list[[offset_index]][["Program.Name"]] <- program_name
}
return(list)
}
xlsx_to_list("./Data/Original Data/KCFS 2019.xlsx", 3, 2)
# Returns a list of dataframes from a given excel spreadsheet, where each
# dataframe is an excel sheet.
#
# xlsx = path to spreadsheet (ex: "./Data/Original Data/KCFS 2019.xlsx")
# start = starting sheet number (ex: 3)
# skip_row = number of top rows to ignore (ex: 2)
xlsx_to_list <- function(xlsx, start, skip_row) {
# Set up return list
list <- list()
# Get list of sheet names
sheet_names <- excel_sheets(path=xlsx)
# Get number of sheets
num_sheets <- length(sheet_names)
# Get range of relevant sheets
sheets <- start:num_sheets
# Add each sheet to the return list
for (sheet in sheets) {
# Temporarily store sheet
temp <- read_excel(xlsx,
skip = skip_row,
sheet = sheet_names[sheet])
# Offset this loop's index so that it matches the current index of the
# return list
offset_index <- sheet - start - 1
# Add sheet to proper index of return list
list[[offset_index]] <- temp
# # Get the program name based off of the current sheet name
# program_name <- sheet_names[[sheet]]
#
# # Add program name to a new program name column in the return list
# list[[offset_index]][["Program.Name"]] <- program_name
}
return(list)
}
xlsx_to_list("./Data/Original Data/KCFS 2019.xlsx", 3, 2)
# Returns a list of dataframes from a given excel spreadsheet, where each
# dataframe is an excel sheet.
#
# xlsx = path to spreadsheet (ex: "./Data/Original Data/KCFS 2019.xlsx")
# start = starting sheet number (ex: 3)
# skip_row = number of top rows to ignore (ex: 2)
xlsx_to_list <- function(xlsx, start, skip_row) {
# Set up return list
list <- list()
# Get list of sheet names
sheet_names <- excel_sheets(path=xlsx)
# Get number of sheets
num_sheets <- length(sheet_names)
# Get range of relevant sheets
sheets <- start:num_sheets
# Add each sheet to the return list
for (sheet in sheets) {
# Temporarily store sheet
temp <- read_excel(xlsx,
skip = skip_row,
sheet = sheet_names[sheet])
# Offset this loop's index so that it matches the current index of the
# return list
offset_index <- sheet - start
# Add sheet to proper index of return list
list[[offset_index]] <- temp
# # Get the program name based off of the current sheet name
# program_name <- sheet_names[[sheet]]
#
# # Add program name to a new program name column in the return list
# list[[offset_index]][["Program.Name"]] <- program_name
}
return(list)
}
xlsx_to_list("./Data/Original Data/KCFS 2019.xlsx", 3, 2)
# Returns a list of dataframes from a given excel spreadsheet, where each
# dataframe is an excel sheet.
#
# xlsx = path to spreadsheet (ex: "./Data/Original Data/KCFS 2019.xlsx")
# start = starting sheet number (ex: 3)
# skip_row = number of top rows to ignore (ex: 2)
xlsx_to_list <- function(xlsx, start, skip_row) {
# Set up return list
list <- list()
# Get list of sheet names
sheet_names <- excel_sheets(path=xlsx)
# Get number of sheets
num_sheets <- length(sheet_names)
# Get range of relevant sheets
sheets <- start:num_sheets
# Add each sheet to the return list
for (sheet in sheets) {
# Temporarily store sheet
temp <- read_excel(xlsx,
skip = skip_row,
sheet = sheet_names[sheet])
# Offset this loop's index so that it matches the current index of the
# return list
offset_index <- sheet - (start - 1)
# Add sheet to proper index of return list
list[[offset_index]] <- temp
# # Get the program name based off of the current sheet name
# program_name <- sheet_names[[sheet]]
#
# # Add program name to a new program name column in the return list
# list[[offset_index]][["Program.Name"]] <- program_name
}
return(list)
}
xlsx_to_list("./Data/Original Data/KCFS 2019.xlsx", 3, 2)
# Returns a list of dataframes from a given excel spreadsheet, where each
# dataframe is an excel sheet.
#
# xlsx = path to spreadsheet (ex: "./Data/Original Data/KCFS 2019.xlsx")
# start = starting sheet number (ex: 3)
# skip_row = number of top rows to ignore (ex: 2)
xlsx_to_list <- function(xlsx, start, skip_row) {
# Set up return list
list <- list()
# Get list of sheet names
sheet_names <- excel_sheets(path=xlsx)
# Get number of sheets
num_sheets <- length(sheet_names)
# Get range of relevant sheets
sheets <- start:num_sheets
# Add each sheet to the return list
for (sheet in sheets) {
# Temporarily store sheet
temp <- read_excel(xlsx,
skip = skip_row,
sheet = sheet_names[sheet])
# Offset this loop's index so that it matches the current index of the
# return list
offset_index <- sheet - (start - 1)
# Add sheet to proper index of return list
list[[offset_index]] <- temp
# Get the program name based off of the current sheet name
program_name <- sheet_names[[sheet]]
# Add program name to a new program name column in the return list
list[[offset_index]][["Program.Name"]] <- program_name
}
return(list)
}
xlsx_to_list("./Data/Original Data/KCFS 2019.xlsx", 3, 2)
temp <- xlsx_to_list("./Data/Original Data/KCFS 2019.xlsx", 3, 2)
temp[[1]]
View(temp[[1]])
# Returns a list of dataframes from a given excel spreadsheet, where each
# dataframe is an excel sheet.
#
# xlsx = path to spreadsheet (ex: "./Data/Original Data/KCFS 2019.xlsx")
# start = starting sheet number (ex: 3)
# skip_row = number of top rows to ignore (ex: 2)
xlsx_to_list <- function(xlsx, start, skip_row) {
# Set up return list
list <- list()
# Get list of sheet names
sheet_names <- excel_sheets(path=xlsx)
# Get number of sheets
num_sheets <- length(sheet_names)
# Get range of relevant sheets
sheets <- start:num_sheets
# Add each sheet to the return list
for (sheet in sheets) {
# Temporarily store sheet
temp <- read_excel(xlsx,
skip = skip_row,
sheet = sheet_names[sheet])
# Offset this loop's index so that it matches the current index of the
# return list
offset_index <- sheet - (start - 1)
# Add sheet to proper index of return list
list[[offset_index]] <- temp
# Get the program name based off of the current sheet name
program_name <- sheet_names[[sheet]]
# Add program name to a new program name column in the return list
list[[offset_index]][["program_name"]] <- program_name
}
return(list)
}
View(temp[[1]])
temp <- xlsx_to_list("./Data/Original Data/KCFS 2019.xlsx", 3, 2)
View(temp[[1]])
?na.omit
?na.rm
shiny::runApp()
shiny::runApp()
?c
# Returns a list of dataframes from a given excel spreadsheet, where each
# dataframe is an excel sheet.
#
# xlsx = path to spreadsheet (ex: "./Data/Original Data/KCFS 2019.xlsx")
# start = starting sheet number (ex: 3)
# skip_row = number of top rows to ignore (ex: 2)
xlsx_to_list <- function(xlsx, start, skip_row) {
# Set up return list
df_list <- list()
# Get list of sheet names
sheet_names <- excel_sheets(path=xlsx)
# Get number of sheets
num_sheets <- length(sheet_names)
# Get range of relevant sheets
sheets <- start:num_sheets
# Add each sheet to the return list
for (sheet in sheets) {
# Temporarily store sheet
temp <- read_excel(xlsx,
skip = skip_row,
sheet = sheet_names[sheet])
# Offset this loop's index so that it matches the current index of the
# return list
offset_index <- sheet - (start - 1)
# Add sheet to proper index of return list
df_list[[offset_index]] <- temp
# Get the program name based off of the current sheet name
program_name <- sheet_names[[sheet]]
# Add program name to a new program name column in the return list
df_list[[offset_index]][["program_name"]] <- program_name
}
return(df_list)
}
xlsx_to_list("Data/Original Data/KCFS 2019.xlsx", 3, 2)
# Returns a list of dataframes with date columns in consistent format.
#
# df_list = list of dataframes
# order_date = name of
consistent_date <- function(df_list, order_date) {
# Get number of dataframes in df list
num_dfs <- length(df_list)
# Fix dates in each df
for (df in 1:num_dfs) {
# Get current df
curr = list[[df]]
## Order Date to consistent date format
if (typeof(curr$`Order Date`) == "character") {
list[[df]]$`Order Date` = as.Date(
as.numeric(curr$`Order Date`), origin = "1899-12-30")
} else {
list[[df]]$`Order Date` = as.Date(curr$`Order Date`)
}
}
}
# Returns a list of dataframes with date columns in consistent format.
#
# df_list = list of dataframes (ex: list)
# order_date = name of
consistent_date <- function(df_list, order_date) {
# Get number of dataframes in df list
num_dfs <- length(df_list)
# Fix dates in each df
for (df in 1:num_dfs) {
# Get current df
curr = list[[df]]
## Order Date to consistent date format
if (typeof(curr$`Order Date`) == "character") {
list[[df]]$`Order Date` = as.Date(
as.numeric(curr$`Order Date`), origin = "1899-12-30")
} else {
list[[df]]$`Order Date` = as.Date(curr$`Order Date`)
}
}
}
# KCFS 2019
X19_list <- list()
X19_programs <- excel_sheets(path="./Data/Original Data/KCFS 2019.xlsx")
sheets <- 3:length(X19_programs)
for (i in sheets) {
temp <- read_excel("./Data/Original Data/KCFS 2019.xlsx",
skip = 2,
sheet = X19_programs[i])
X19_list[[i - 2]] <- temp
}
# KCFS 2020
X20_list <- list()
X20_programs <- excel_sheets(path="./Data/Original Data/KCFS 2020.xlsx")
sheets <- 2:length(X20_programs)
for (i in sheets) {
temp <- read_excel("./Data/Original Data/KCFS 2020.xlsx",
skip = 3,
sheet = X20_programs[i])
X20_list[[i - 1]] <- temp
}
# CARES
cares.list <- list()
cares_programs <- excel_sheets(path="./Data/Original Data/CARES.xlsx")
sheets <- 2:length(cares_programs)
for (i in sheets) {
temp <- read_excel("./Data/Original Data/CARES.xlsx",
skip = 1,
sheet = cares_programs[i])
cares.list[[i - 1]] <- temp
}
# Append lists
X19_list <- X19_list %>%
lapply(rename, `Order Date` = `Contract Date`)
x <- c()
for (i in 1:length(X19_list)) {
temp_cols <- colnames(X19_list[[i]])
temp_df <- X19_list[[i]]
if ("Contract Amount" %in% temp_cols) {
X19_list[[i]] <- temp_df %>%
rename(`Order Amount ($)` = `Contract Amount`)
} else if ("\r\nContract Amount" %in% temp_cols) {
X19_list[[i]] <- temp_df %>%
rename(`Order Amount ($)` = `\r\nContract Amount`)
} else {
x <- append(x, i)
}
}
list <- append(X19_list, X20_list)
list <- append(list, cares.list)
## Select relevant columns
list <- list %>%
lapply(select, `Farm Name`,
`Order Date`,
`Pounds purchased`,
`Order Amount ($)`
)
## Filter out "Totals"
list <- list %>%
lapply(subset, `Farm Name` != "Totals")
# -- Small Fixes --
## Filter out empty dfs
list <- list[lapply(list, nrow) > 0]
consistent_date(list, `Order date`)
# Returns a list of dataframes with date columns in consistent format.
#
# df_list = list of dataframes (ex: list)
# order_date = name of
consistent_date <- function(df_list, order_date) {
# Get number of dataframes in df list
num_dfs <- length(df_list)
# Fix dates in each df
for (df in 1:num_dfs) {
# Get current df
curr = df_list[[df]]
## Order Date to consistent date format
if (typeof(curr$`Order Date`) == "character") {
df_list[[df]]$`Order Date` = as.Date(
as.numeric(curr$`Order Date`), origin = "1899-12-30")
} else {
df_list[[df]]$`Order Date` = as.Date(curr$`Order Date`)
}
}
return(df_list)
}
consistent_date(list, `Order date`)
# Returns a list of dataframes with date columns in consistent format.
#
# df_list = list of dataframes (ex: list)
# order_date = name of
consistent_date <- function(df_list, order_date) {
# Get number of dataframes in df list
num_dfs <- length(df_list)
# Fix dates in each df
for (df in 1:num_dfs) {
# Get current df
curr = df_list[[df]]
## Order Date to consistent date format
if (typeof(curr$order_date) == "character") {
df_list[[df]]$order_date = as.Date(
as.numeric(curr$order_date), origin = "1899-12-30")
} else {
df_list[[df]]$order_date = as.Date(curr$order_date)
}
}
return(df_list)
}
consistent_date(list, `Order date`)
list <- list %>%
lapply(rename, order_date = `Order Date`)
list[[1]]
consistent_date(list)
runApp()
source("Functions.R")
runApp()
source("Functions.R")
source("Data/Data Compilation.R")
shiny::runApp()
df$order_date = as.Date(
as.numeric(curr$order_date), origin = "1899-12-30")
df$order_date = as.Date(
as.numeric(df$order_date), origin = "1899-12-30")
View(df)
df <- read_csv("Data/dataframe.csv")
shiny::runApp()
# Remove unnecessary numbers by removing everything after the '=', '(', and
# '$' signs (inclusive).
#
# df = dataframe
# col = column
strip_unnecessary <- function(df) {
remove <- "\\(.*|=.*|\\$.*| +$"
df <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
return(df)
}
strip_unnecessary("10 $10")
strip_unnecessary(list[[1]])
list <- list %>%
lapply(rename, pounds_purchased = `Pounds Purchasdd`)
list <- list %>%
lapply(rename, pounds_purchased = `Pounds Purchased`)
list <- list %>%
lapply(rename, pounds_purchased = `Pounds purchased`)
strip_unnecessary(list[[1]])
strip_unnecessary(list[[2]])
# Remove unnecessary numbers by removing everything after the '=', '(', and
# '$' signs (inclusive).
#
# df = dataframe
# col = column
strip_unnecessary <- function(df) {
remove <- "\\(.*|=.*|\\$.*| +$"
df <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
return(df)
}
strip_unnecessary(list[[2]])
remove <- "\\(.*|=.*|\\$.*| +$"
list[[1]] %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
list[[1]]$pounds_purchased))
list[[1]] %>%
mutate(pounds_purchased=gsub(pattern="60",
replacement = "",
list[[1]]$pounds_purchased))
remove <- "\\(.*|=.*|\\$.*| +$"
list[[1]] %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
list[[1]]$pounds_purchased))
list[[1]] %>%
mutate(pounds_purchased=gsub(pattern="\\(.*|=.*|\\$.*| +$",
replacement = "",
list[[1]]$pounds_purchased))
remove <- "\\(.*|=.*|\\$.*| +$"
df_fix_lbs <- df %>%
mutate(`Pounds purchased`=gsub(pattern=remove,
replacement = "",
df$`Pounds purchased`))
remove <- "\\(.*|=.*|\\$.*| +$"
df_fix_lbs <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
View(df_fix_lbs)
test <- list[[1]] %>%
mutate(pounds_purchased=gsub(pattern="\\(.*|=.*|\\$.*| +$",
replacement = "",
list[[1]]$pounds_purchased))
test
# Remove unnecessary numbers by removing everything after the '=', '(', and
# '$' signs (inclusive).
#
# df = dataframe
# col = column
strip_unnecessary <- function(df) {
# remove <- "\\(.*|=.*|\\$.*| +$"
#
# df <- df %>%
#   mutate(pounds_purchased=gsub(pattern=remove,
#                                  replacement = "",
#                                  df$pounds_purchased))
remove <- "\\(.*|=.*|\\$.*| +$"
return <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
return(return)
}
strip_unnecessary(list[[1]])
remove <- "\\(.*|=.*|\\$.*| +$"
return <- df %>%
mutate(pounds_purchased=gsub(pattern=remove,
replacement = "",
df$pounds_purchased))
return
